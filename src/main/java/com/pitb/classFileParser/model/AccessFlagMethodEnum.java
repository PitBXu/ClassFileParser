package com.pitb.classFileParser.model;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Getter
@AllArgsConstructor
public enum AccessFlagMethodEnum {

    /**
     * Declared public; may be accessed from outside its
     * package.
     */
    ACC_PUBLIC(0x0001),
    /**
     * Declared private; accessible only within the
     * defining class and other classes belonging to the same
     * nest (§5.4.4).
     */
    ACC_PRIVATE(0x0002),
    /**
     * Declared protected; may be accessed within
     * subclasses.
     */
    ACC_PROTECTED(0x0004),
    /**
     * Declared static.
     */
    ACC_STATIC(0x0008),
    /**
     * Declared final; must not be overridden (§5.4.5).
     */
    ACC_FINAL(0x0010),
    /**
     * Declared synchronized; invocation is wrapped
     * by a monitor use.
     */
    ACC_SYNCHRONIZED(0x0020),
    /**
     * A bridge method, generated by the compiler.
     */
    ACC_BRIDGE(0x0040),
    /**
     * Declared with variable number of arguments.
     */
    ACC_VARARGS(0x0080),
    /**
     * Declared native; implemented in a language other
     * than the Java programming language.
     */
    ACC_NATIVE(0x0100),
    /**
     * Declared abstract; no implementation is
     * provided.
     */
    ACC_ABSTRACT(0x0400),
    /**
     * Declared strictfp; floating-point mode is FPstrict.
     */
    ACC_STRICT(0x0800),
    /**
     * Declared synthetic; not present in the source code.
     */
    ACC_SYNTHETIC(0x1000)

    ;

    /**
     * 将 val 转换为相应的权限
     */
    public static List<AccessFlagMethodEnum> getAccess(Integer val) {
        List<AccessFlagMethodEnum> allSeq = Arrays.stream(AccessFlagMethodEnum.values())
                .sorted(Comparator.comparingInt(AccessFlagMethodEnum::getVal).reversed())
                .collect(Collectors.toList());

        List<AccessFlagMethodEnum> list = new ArrayList<>();
        for (AccessFlagMethodEnum anEnum : allSeq) {
            if (val >= anEnum.val) {
                list.add(anEnum);
                val -= anEnum.val;
            }
        }
        return list;
    }


    private int val;
}
